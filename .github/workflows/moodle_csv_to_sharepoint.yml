name: Test Moodle CSV (nur Download)

on:
  workflow_dispatch: {}   # manuell startbar

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install requests

      - name: Download CSV (mit Debug)
        env:
          MOODLE_BASE: ${{ secrets.MOODLE_BASE }}
          MOODLE_USER: ${{ secrets.MOODLE_USER }}
          MOODLE_PASS: ${{ secrets.MOODLE_PASS }}
          REPORT_ID:   ${{ secrets.REPORT_ID }}
        run: |
          python - <<'PY'
          import os, re, sys, datetime, pathlib, requests

          BASE = os.environ["MOODLE_BASE"].rstrip("/")
          USER = os.environ["MOODLE_USER"]
          PASS = os.environ["MOODLE_PASS"]
          RID  = os.environ["REPORT_ID"]

          def dump_debug(name, resp):
              p = pathlib.Path(f"debug_{name}.txt")
              # wenn Text â†’ Text dumpen, sonst Bytes
              ct = resp.headers.get("content-type","")
              if ct.startswith("text/"):
                  p.write_text(resp.text[:2000], encoding="utf-8")
              else:
                  p.write_bytes(resp.content[:2000])
              print(f"[DEBUG] {name}: {resp.status_code} {resp.url}")
              print(f"[DEBUG] Content-Type: {ct}")
              if resp.history:
                  print("[DEBUG] Redirects:", " -> ".join([h.headers.get("Location","?") for h in resp.history if h.headers.get("Location")]))

          s = requests.Session()
          s.headers.update({"User-Agent": "gh-moodle-csv/1.1"})

          # 1) Login-Seite (versuche manuelles Login explizit, falls SSO vorhanden)
          login_urls = [
              f"{BASE}/login/index.php?auth=manual",  # falls vorhanden
              f"{BASE}/login/index.php"
          ]
          r = None
          for url in login_urls:
              r = s.get(url, allow_redirects=True, timeout=45)
              dump_debug("login_page", r)
              m = re.search(r'name="logintoken"\s+value="([^"]+)"', r.text or "")
              if m:
                  token = m.group(1)
                  break
          else:
              print("FEHLER: logintoken nicht gefunden (evtl. SSO erzwungen / falsche Loginseite).", file=sys.stderr)
              sys.exit(10)

          # 2) Login
          r = s.post(f"{BASE}/login/index.php",
                     data={"username": USER, "password": PASS, "logintoken": token},
                     allow_redirects=True, timeout=60)
          dump_debug("login_post", r)

          # 3) Check auf /my/ (sollte NICHT wieder Login sein)
          chk = s.get(f"{BASE}/my/", allow_redirects=True, timeout=45)
          dump_debug("after_login_my", chk)
          if "login/index.php" in chk.url or chk.status_code in (401, 403):
              print("FEHLER: Login fehlgeschlagen oder zu Login umgeleitet (SSO erzwungen? falsche Credentials? Rechte?).", file=sys.stderr)
              sys.exit(11)

          # 4) CSV abrufen
          csv_url = f"{BASE}/report/customsql/view.php?id={RID}&download=1"
          r = s.get(csv_url, allow_redirects=True, timeout=180)
          dump_debug("csv_download", r)

          ct = r.headers.get("content-type","")
          if r.status_code != 200:
              print(f"FEHLER: CSV-Download HTTP {r.status_code}", file=sys.stderr); sys.exit(12)
          if "text/csv" not in ct and "application/vnd.ms-excel" not in ct:
              print("FEHLER: Kein CSV-Content-Type erhalten (oft HTML wegen fehlender Berechtigung/Session).", file=sys.stderr); sys.exit(13)
          if not r.content or len(r.content) < 5:
              print("FEHLER: CSV leer oder zu klein.", file=sys.stderr); sys.exit(14)

          pathlib.Path("out").mkdir(exist_ok=True)
          fname = f"moodle_report_{RID}_{datetime.datetime.utcnow().strftime('%Y%m%d_%H%M')}.csv"
          (pathlib.Path("out")/fname).write_bytes(r.content)
          print(f"OK: gespeichert als out/{fname}")
          PY

      - name: Upload Artefakte (CSV & Debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: moodle_csv_debug
          path: |
            out/*.csv
            debug_*.txt
          if-no-files-found: warn
